(defun walkp (from to)
  (>= (char-code from)
      (1- (char-code to))))

(defun location-of (grid s)
  (iter (for i below (array-dimension grid 0))
        (iter (for j below (array-dimension grid 1))
              (when (eql s (aref grid i j))
                (return-from location-of (cons i j))))))

(defun pos+ (a b)
  (cons (+ (car a) (car b))
        (+ (cdr a) (cdr b))))

(defun insidep (pos grid)
  (and (>= (car pos) 0)
       (>= (cdr pos) 0)
       (< (car pos) (array-dimension grid 0))
       (< (cdr pos) (array-dimension grid 1))))

(defun bfs (grid start walkp-fun)
  (let ((que (make-queue :simple-queue))
        (steps (make-hash-table :test #'equalp))
        (visited (make-hash-table :test #'equalp)))
    (setf (gethash start steps) 0)
    (qpush que start)
    (iter (while (qtop que))
          (for cur = (qpop que))
          (when (gethash cur visited)
            (next-iteration))
          (setf (gethash cur visited) t)
          (iter (for offset in '((1 . 0) (0 . 1) (-1 . 0) (0 . -1)))
                (for neigh = (pos+ offset cur))
                (when (and (insidep neigh grid)
                           (funcall walkp-fun
                                    (aref grid (car cur) (cdr cur))
                                    (aref grid (car neigh) (cdr neigh))))
                  (qpush que neigh)
                  (let* ((new (1+ (gethash cur steps)))
                         (old (gethash neigh steps new)))
                    (setf (gethash neigh steps) (min old new))))))
    steps))

(defun part1 (grid)
  (let ((start (location-of grid #\S))
        (goal (location-of grid #\E)))
    (setf (aref grid (car start) (cdr start)) #\a)
    (setf (aref grid (car goal) (cdr goal)) #\z)
    (->> (bfs grid start #'walkp)
         (gethash goal))))

(defun part2 (grid)
  (let ((goal (location-of grid #\S))
        (start (location-of grid #\E)))
    (setf (aref grid (car start) (cdr start)) #\z)
    (setf (aref grid (car goal) (cdr goal)) #\a)
    (let ((steps (bfs grid start (lambda (from to)
                                   (walkp to from)))))
      (iter outer (for i below (array-dimension grid 0))
            (iter (for j below (array-dimension grid 1))
                  (when (and (eql #\a (aref grid i j))
                             (gethash (cons i j) steps))
                    (in outer (minimize (gethash (cons i j) steps)))))))))

(defparameter *parser* (aoc:char-grid))

(aoc:run-day #'part1 :parser *parser*
                     :expected-answer 520)
(aoc:run-day #'part2 :parser *parser*
                     :expected-answer 508)
