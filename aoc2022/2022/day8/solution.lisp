(defun max-from-left (grid)
  (iter (with res = (copy-array grid))
        (for i below (array-dimension grid 0))
        (iter (for j from 1 below (array-dimension grid 1))
              (setf (aref res i j)
                    (max (aref res i j)
                         (aref res i (1- j)))))
        (finally (return res))))

(defun max-from-above (grid)
  (iter (with res = (copy-array grid))
        (for i below (array-dimension grid 1))
        (iter (for j from 1 below (array-dimension grid 0))
              (setf (aref res j i)
                    (max (aref res j i)
                         (aref res (1- j) i))))
        (finally (return res))))

(defun max-from-right (grid)
  (iter (with res = (copy-array grid))
        (for i below (array-dimension grid 0))
        (iter (for j from (- (array-dimension grid 1) 2) downto 0)
              (setf (aref res i j)
                    (max (aref res i j)
                         (aref res i (1+ j)))))
        (finally (return res))))

(defun max-from-below (grid)
  (iter (with res = (copy-array grid))
        (for i below (array-dimension grid 1))
        (iter (for j from (- (array-dimension grid 0) 2) downto 0)
              (setf (aref res j i)
                    (max (aref res j i)
                         (aref res (1+ j) i))))
        (finally (return res))))

(defun part1 (grid)
  (let ((left (max-from-left grid))
        (right (max-from-right grid))
        (above (max-from-above grid))
        (below (max-from-below grid)))
    (iter (with count = 0)
          (for i from 1 below (1- (array-dimension grid 0)))
          (iter (for j from 1 below (1- (array-dimension grid 1)))
                (when (let ((me (aref grid i j)))
                        (or (> me (aref above (1- i) j))
                            (> me (aref below (1+ i) j))
                            (> me (aref right i (1+ j)))
                            (> me (aref left i (1- j)))))
                  (incf count)))
          (finally (return (- (+ count
                                 (* 2 (array-dimension grid 0))
                                 (* 2 (array-dimension grid 1)))
                              4))))))

(defun scenic-score (grid i j)
  (let ((dim0 (1- (array-dimension grid 0)))
        (dim1 (1- (array-dimension grid 1)))
        (me (aref grid i j)))
    (* (1+ (iter (for x from (1+ i) below dim0)
                 (while (> me (aref grid x j)))
                 (count t)))
       (1+ (iter (for x from (1- i) downto 1)
                 (while (> me (aref grid x j)))
                 (count t)))
       (1+ (iter (for y from (1- j) downto 1)
                 (while (> me (aref grid i y)))
                 (count t)))
       (1+ (iter (for y from (1+ j) below dim1)
                 (while (> me (aref grid i y)))
                 (count t))))))

(defun part2 (grid)
  (iter outer
        (for i from 1 below (1- (array-dimension grid 0)))
        (iter (for j from 1 below (1- (array-dimension grid 1)))
              (in outer (maximize (scenic-score grid i j))))))

(defparameter *parser* (aoc:integer-grid-tight))

(aoc:run-day #'part1 :parser *parser*
                     :expected-answer 1814)
(aoc:run-day #'part2 :parser *parser*
                     :expected-answer 330786)
